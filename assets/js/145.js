(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{690:function(e,t,s){"use strict";s.r(t);var n=s(5),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("A friend recently let me know of a "),s("a",{attrs:{href:"https://www.pouet.net/prod.php?which=82902",target:"_blank",rel:"noopener noreferrer"}},[e._v("tiny program"),s("OutboundLink")],1),e._v(" that runs a 3D scene with both audio and video. How tiny? The executable, a .com file, is 64 bytes in size (yeah, that's pretty damn small!), and the camera view is a flyover of a grassy field with a blue sky above. The audio is a single note played once, overlaid with the sound of a helicopter's whirring blades and a periodic swooshing noise that sounds like the wind. It seems too amazing to be real, especially when you've seen the video:")]),e._v(" "),s("p"),s("div",{staticClass:"embed-responsive embed-responsive-16by9"},[s("iframe",{staticClass:"embed-responsive-item youtube-player",attrs:{type:"text/html",width:"640",height:"390",src:"https://www.youtube.com/embed/CAAuIgjrZWY",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:""}})]),s("p"),e._v(" "),s("h2",{attrs:{id:"dosbox"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dosbox"}},[e._v("#")]),e._v(" DOSBox")]),e._v(" "),s("p",[e._v("Being inquisitive and skeptical, I decided to grab the code and try to run it in "),s("a",{attrs:{href:"https://www.dosbox.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("DOSBox"),s("OutboundLink")],1),e._v(". Luckily, the developer had included a config file for DOSBox in his code archive. All I needed to do was install DOSBox and launch the binary.")]),e._v(" "),s("p",[e._v("First, installing software on Windows is a lot easier if we use "),s("a",{attrs:{href:"https://chocolatey.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("Chocolatey"),s("OutboundLink")],1),e._v(":")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("choco install -y dosbox\n")])])]),s("h2",{attrs:{id:"launching"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#launching"}},[e._v("#")]),e._v(" Launching")]),e._v(" "),s("p",[e._v("Once DOSBox is installed, we just need to find out which folder it was installed to ("),s("code",[e._v("C:\\Program Files (x86)\\DOSBox-0.74-3\\")]),e._v(") and figure our our command to run in powershell:")]),e._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[e._v("& "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"C:\\Program Files (x86)\\DOSBox-0.74-3\\DOSBox.exe"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("fullscreen "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("conf "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\\dosbox"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("74"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("conf "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("c "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"mount C ."')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("c "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"C:\\in2war64.com"')]),e._v("\n")])])]),s("p",[e._v("The command line options above run DOXBox fullscreen ("),s("code",[e._v("-fullscreen")]),e._v("), load our custom config ("),s("code",[e._v("-conf .\\dosbox-0.74.conf")]),e._v("), mount the current folder as the C drive ("),s("code",[e._v('-c "mount C ."')]),e._v("), and launch the binary from the C drive ("),s("code",[e._v('"C:\\in2war64.com"')]),e._v(").")]),e._v(" "),s("p",[e._v("This command can be dropped into a powershell script file in the same folder as the code, so that we can run it easily. Just create a file with a .ps1 extension (I used "),s("code",[e._v("dosbox.ps1")]),e._v(") and double click on the file to launch.")]),e._v(" "),s("h2",{attrs:{id:"what-how"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-how"}},[e._v("#")]),e._v(" What? How?")]),e._v(" "),s("p",[e._v("The important thing to realise here is that these 64 bytes of code are not creating a 3D environment with textured grass, sky and a soundtrack. The code uses a few clever tricks to fake these things. Each trick does something to either the screen or audio output, and when put together they end up giving the impression of a 3D flyover of a field.")]),e._v(" "),s("p",[e._v("Someone far cleverer than me has "),s("a",{attrs:{href:"https://www.reddit.com/r/tinycode/comments/d4kdco/3d_animation_with_sound_in_64_bytes_of_assembler/f0r9kob/",target:"_blank",rel:"noopener noreferrer"}},[e._v("delved into what's going on"),s("OutboundLink")],1),e._v(' over on Reddit. I recommend having a read of that comment to get a better idea of how it all works. However, ignore the thread\'s title - "3D animation with sound in 64 bytes of assembler" - as this is clearly not a proper 3D animation, but rather some graphical smarts that end up looking like a rendered 3D scene. It seems like a little bit of maths is used to create a single line of varying green colour pixels, wider than the screen, starting at the bottom of the screen. The lines are moved up the screen towards the "horizon", and scaled (shrunk) as they are moved up - giving the illusion of perspective. The lines of pixels only appear to change every few lines, which creates a checkerboard effect. Above this horizon the screen is simply painted blue. A new line of pixels is injected at the bottom of the screen each time a line is moved up, and the overall effect looks like a flat plane of grass heading off into the distance, with the movement of these lines of pixels giving the impression that the camera is flying over them.')]),e._v(" "),s("p",[e._v("The Reddit breakdown suggests that the audio is created from simply sending the code's own binary to the MIDI port. My suspicion there is that the coder just blindly tried this approach, and then when he found that the set of noises it made were reminiscent of a helicopter flying into battle, chose to name the program accordingly. This is a much more believable scenario than the idea that the code was somehow deliberately written in a way that was designed to make these particular sounds when fed to the MIDI port.")]),e._v(" "),s("p",[e._v("As far as my analysis is concerned, here's the code in hex (4 rows of 16 bytes), just to show that it's only 64 bytes:")]),e._v(" "),s("div",{staticClass:"language-hex extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("14 13 BA 30 03 F3 6E CD 10 B8 4F 0C E6 40 E2 F7\n1F 68 00 A5 07 B8 CD CC F7 E7 89 E8 80 EE F6 F6\nF6 92 2C 7F F6 EA 02 16 6C 04 92 30 C6 F6 EE D4\n09 9C 9D 2C 74 AA AF EB DC C9 38 99 46 67 51 7F\n")])])]),s("p",[e._v("And here's the program loaded into the free version of "),s("a",{attrs:{href:"https://www.hex-rays.com/products/ida/support/download_freeware.shtml",target:"_blank",rel:"noopener noreferrer"}},[e._v("IDA"),s("OutboundLink")],1),e._v(" (16 bit import):")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("seg000:0000 ; Format      : Binary file\nseg000:0000 ; Base Address: 0000h Range: 0000h - 0040h Loaded length: 0040h\nseg000:0000\nseg000:0000                 .686p\nseg000:0000                 .mmx\nseg000:0000                 .model flat\nseg000:0000\nseg000:0000 ; ===========================================================================\nseg000:0000\nseg000:0000 ; Segment type: Pure code\nseg000:0000 seg000          segment byte public 'CODE' use16\nseg000:0000                 assume cs:seg000\nseg000:0000                 assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing\nseg000:0000                 adc     al, 13h\nseg000:0002                 mov     dx, 330h\nseg000:0005                 rep outsb\nseg000:0007\nseg000:0007 loc_7:                                  ; CODE XREF: seg000:000E↓j\nseg000:0007                 int     10h             ; - VIDEO -\nseg000:0009                 mov     ax, 0C4Fh\nseg000:000C                 out     40h, al         ; Timer 8253-5 (AT: 8254.2).\nseg000:000E                 loop    loc_7\nseg000:0010                 pop     ds\nseg000:0011                 push    0A500h\nseg000:0014                 pop     es\nseg000:0015                 assume es:nothing\nseg000:0015\nseg000:0015 loc_15:                                 ; CODE XREF: seg000:0037↓j\nseg000:0015                 mov     ax, 0CCCDh\nseg000:0018                 mul     di\nseg000:001A                 mov     ax, bp\nseg000:001C                 sub     dh, 0F6h\nseg000:001F                 div     dh\nseg000:0021                 xchg    ax, dx\nseg000:0022                 sub     al, 7Fh\nseg000:0024                 imul    dl\nseg000:0026                 add     dl, ds:46Ch\nseg000:002A                 xchg    ax, dx\nseg000:002B                 xor     dh, al\nseg000:002D                 imul    dh\nseg000:002F                 aam     9\nseg000:0031                 pushf\nseg000:0032                 popf\nseg000:0033                 sub     al, 74h\nseg000:0035                 stosb\nseg000:0036                 scasw\nseg000:0037                 jmp     short loc_15\nseg000:0037 ; ---------------------------------------------------------------------------\nseg000:0039                 db 0C9h\nseg000:003A                 db 38h, 99h, 46h, 67h, 51h, 7Fh\nseg000:003A seg000          ends\nseg000:003A\nseg000:003A\nseg000:003A                 end\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);